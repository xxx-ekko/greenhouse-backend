name: Deploy Backend to Server

# D√©clencheur : se lance √† chaque push sur la branche "main"
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    # Le robot utilisera une machine virtuelle Ubuntu
    runs-on: ubuntu-latest

    steps:
      # √âtape 1: R√©cup√®re le code du d√©p√¥t
      - name: 1. Checkout Repository
        uses: actions/checkout@v4

      # √âtape 2: Se connecte au registre de conteneurs de GitHub
      - name: 2. Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      # √âtape 3: Construit et pousse l'image Docker
      - name: 3. Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ secrets.DOCKER_USERNAME }}/greenhouse-backend:latest

      # √âtape 4: Se d√©ploie sur le serveur via SSH
      - name: 4. Deploy to Server via Cloudflare Tunnel
        run: |
          # Installe cloudflared sur la machine virtuelle de GitHub
          echo "--- Installing cloudflared ---"
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

          # Pr√©pare l'environnement SSH de mani√®re s√©curis√©e
          echo "--- Setting up SSH ---"
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Configure le client SSH pour utiliser le tunnel (m√©thode plus robuste)
          cat <<EOT >> ~/.ssh/config
          Host ${{ secrets.SERVER_HOST }}
            User ${{ secrets.SERVER_USER }}
            ProxyCommand /usr/local/bin/cloudflared access ssh --hostname %h
            IdentityFile ~/.ssh/deploy_key
          EOT

          # Lance le script de d√©ploiement via SSH √† travers le tunnel
          echo "--- Deploying to server ---"
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_HOST }} << 'EOF'
            echo "‚úÖ Connexion au serveur r√©ussie, d√©but du d√©ploiement..."
            cd ~/greenhouse-backend
            docker login ghcr.io -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PAT }}
            docker compose pull backend
            docker compose up -d --force-recreate backend
            echo "üöÄ D√©ploiement termin√© avec succ√®s !"
          EOF
